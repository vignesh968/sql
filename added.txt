            
-- 34. **FORMAT()**: Formats a number with commas as thousands separators.
    SELECT FORMAT(1234567.89, 0) AS formatted_number;
    

-- 35. **REPLACE() with REGEXP**: Replaces occurrences of a pattern using regular expressions.
    SELECT REGEXP_REPLACE('Hello 123', '[0-9]', 'X') AS replaced_string;
    

-- 36. **REPEAT() with LPAD()**: Repeats a string a specified number of times and pads it with another string.
        SELECT LPAD(REPEAT('*', 5), 10, '-') AS repeated_and_padded_string;
    

-- 37. **SOUNDEX()**: Returns a phonetic representation of a string.
    SELECT SOUNDEX('Smith') AS soundex_value;
    

-- 38. **REVERSE() with SUBSTRING()**: Reverses a string and extracts a substring from it.
    
    SELECT SUBSTRING(REVERSE('Hello'), 1, 3) AS reversed_substring;
    

-- 39. **UUID()**: Generates a Universally Unique Identifier (UUID).
    SELECT UUID() AS generated_uuid;
    

-- 40. **REGEXP_SUBSTR()**: Returns the matched substring based on a regular expression pattern.
    
    SELECT REGEXP_SUBSTR('My phone number is 123-456-7890', '[0-9]+++') AS extracted_number;
    

-- 41. **LOCATE() with INSTR()**: Finds the position of a substring and returns the same result using a different function.
    
    SELECT LOCATE('world', 'Hello world') AS position_using_locate,
           INSTR('Hello world', 'world') AS position_using_instr;
    

-- 42. **LPAD() with RPAD()**: Pads a string on both sides with another string to a specified length.
    SELECT LPAD('12', 5, '0') AS left_padded,
           RPAD('12', 5, '0') AS right_padded;
    

-- 43. **INSERT() with CONCAT()**: Inserts a substring into a string using CONCAT().
    SELECT CONCAT(INSERT('Hello', 3, 0, 'INSERTED '), ' world') AS modified_string;
    
    

-- 44. **FIELD() with CONCAT()**: Searches for a value in a list and returns the index of the first occurrence.
    SELECT FIELD('banana', CONCAT('apple', 'banana', 'grape')) AS position;
    


-- 45. **UCASE()**: Converts a string to uppercase.
    SELECT UCASE('hello') AS uppercase_string;
    

-- 46. **LCASE()**: Converts a string to lowercase.
    SELECT LCASE('HELLO') AS lowercase_string;
    

47. **MID()**: Extracts a substring from a string.
    ```sql
    SELECT MID('Hello', 2, 3) AS substring_result;
    ```

48. **SPACE()**: Returns a string of the specified number of spaces.
    ```sql
    SELECT SPACE(5) AS spaces;
    ```

49. **LOCATE()**: Returns the position of the first occurrence of a substring in a string.
    ```sql
    SELECT LOCATE('l', 'Hello') AS position;
    ```

50. **REVERSE()**: Reverses a string.
    ```sql
    SELECT REVERSE('Hello') AS reversed_string;
    ```

51. **REPEAT()**: Repeats a string a specified number of times.
    ```sql
    SELECT REPEAT('Hello ', 3) AS repeated_string;
    ```

52. **FIND_IN_SET()**: Returns the position of a string within a comma-separated list.
    ```sql
    SELECT FIND_IN_SET('apple', 'apple,banana,grape') AS position;
    ```

53. **REGEXP**: Allows pattern matching using regular expressions.
    ```sql
    SELECT 'MySQL' REGEXP 'My' AS is_match;
    ```

54. **LEFT() and RIGHT() with LOCATE()**: Extracts a substring based on a pattern.
    ```sql
    SELECT LEFT('Hello world', LOCATE(' ', 'Hello world')) AS left_substring;
    SELECT RIGHT('Hello world', LENGTH('Hello world') - LOCATE(' ', 'Hello world')) AS right_substring;
    ```

55. **INSERT()**: Inserts a substring into a string.
    ```sql
    SELECT INSERT('Hello', 3, 0, 'INSERTED ') AS modified_string;
    ```

56. **LPAD() and RPAD()**: Pads a string to a certain length with another string.
    ```sql
    SELECT LPAD('123', 5, '0') AS left_padded_string;
    SELECT RPAD('123', 5, '0') AS right_padded_string;
    ```

57. **HEX()**: Converts a decimal value to a hexadecimal value.
    ```sql
    SELECT HEX(255) AS hex_value;
    ```

58. **UNHEX()**: Converts a hexadecimal value to a decimal value.
    ```sql
    SELECT UNHEX('FF') AS decimal_value;
    ```




### Numeric Functions:

1. **ROUND()**: Rounds a number to a specified number of decimal places.
   ```sql
   SELECT ROUND(5.678, 2) AS rounded_number;
   ```

2. **CEIL()**: Rounds a number up to the nearest integer.
   ```sql
   SELECT CEIL(5.2) AS ceil_result;
   ```

3. **FLOOR()**: Rounds a number down to the nearest integer.
   ```sql
   SELECT FLOOR(5.8) AS floor_result;
   ```

4. **ABS()**: Returns the absolute value of a number.
   ```sql
   SELECT ABS(-10) AS absolute_value;
   ```

5. **POWER()**: Raises a number to a specified power.
   ```sql
   SELECT POWER(2, 3) AS result;
   ```

### Date and Time Functions:

6. **NOW()**: Returns the current date and time.
   ```sql
   SELECT NOW() AS current_datetime;
   ```

7. **DATE()**: Extracts the date part from a datetime or timestamp.
   ```sql
   SELECT DATE('2023-09-20 15:30:00') AS extracted_date;
   ```

8. **TIME()**: Extracts the time part from a datetime or timestamp.
   ```sql
   SELECT TIME('2023-09-20 15:30:00') AS extracted_time;
   ```

9. **DATEDIFF()**: Calculates the difference in days between two dates.
   ```sql
   SELECT DATEDIFF('2023-09-30', '2023-09-20') AS day_difference;
   ```

10. **DATE_ADD() and DATE_SUB()**: Adds or subtracts a specified time interval from a date.
    ```sql
    SELECT DATE_ADD('2023-09-20', INTERVAL 3 DAY) AS added_date;
    SELECT DATE_SUB('2023-09-20', INTERVAL 1 MONTH) AS subtracted_date;
    ```

### Mathematical Operators:

11. **+, -, *, /, %**: Addition, subtraction, multiplication, division, and modulo operators.
    ```sql
    SELECT 5 + 3 AS addition_result,
           5 - 3 AS subtraction_result,
           5 * 3 AS multiplication_result,
           5 / 3 AS division_result,
           5 % 3 AS modulo_result;
    ```

12. **SUM()**: Calculates the sum of a column.
    ```sql
    SELECT SUM(column_name) AS total_sum FROM table_name;
    ```

13. **AVG()**: Calculates the average of a column.
    ```sql
    SELECT AVG(column_name) AS average_value FROM table_name;
    ```

14. **COUNT()**: Counts the number of rows or non-null values in a column.
    ```sql
    SELECT COUNT(*) AS total_rows FROM table_name;
    ```

