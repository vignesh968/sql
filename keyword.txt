
create table employeedata(
emp_id int  primary key auto_increment,
ename varchar(20) not null,
job_desc varchar(20) default 'unassigned',
salary int,
pan varchar(10) unique
check(salary>100000));
-- add not nu;;

primary key - it should be unique
auto increment -it automatically increase value for next rows
not null -> it should not be null always
deafult -> when deafult use it set 'NULL' when user not enter anything
BUT here unassigned 
check -it is used to check condition ------- it all done by creating table ,it check the data,

if garde >8 na disply name else null --use case command
1.empty -  is null
2.combination   not ( --------------) or(-------)
3.exclude    not (     )
4.between 'a' and 'l' 
5.not between 'a' and 'l'  
6.  ordered by each customer. check output is in asc or des -else just do group by 
7.having caluse when it depend on aggregation ex having avg(mark)>100

8.group by
 non aggregation of all column should be group by after that
9.In the query, the GROUP BY clause is placed after the WHERE
clause.
10.In the query, the GROUP BY clause is placed before the ORDER
BY clause if used.
11.In the query, the Group BY clause is placed before the Having
clause.

12.nearest - floor
13.round up -ceiling
14 in sql date should be in '2023-09-23 '
15 .if output not showing check the column name
16.NOT it change the symbols and operation (> to <=,OR to AND,< to >=)
17. like '%c' , % it represent any no of character present
    like '_k' ,the length of charcter should be 2
    like '____k' ,the length of charcter should be 5 
		_ single character
18.REGEXP
 it work similer to  like without %
ex1 contain any where :   where lastname regexp 'field'
ex2 starting :  where lastname regexp '^field'
ex3 ending : where lastname regexp 'field$'
ex4 multiple condition:  where lastname regexp 'field$ | ^mac|read'
ex5 [] before that character : where lastname regexp '[gim]e' 
output in : ge OR ie OR me similerly before or after ex : 'e[gim]'
ex6 [rage from a-h] as : where lastname regexp '[a-h]e'
-^ beginning
-$ ending
-| logical or
-[assd] present in
-[a-g] range

19 order by
 ex 1: order by column1 (or) order by column 1,column 2 
 ex 2: we can use select *,q*u as total price 
ex 3: check it count the particular city how many pepole live
             order by count(city)

20 .limit
select * from employees limit 4,3; 4 record from starting it  
limit clause comes at end 

21 joins 
when the matching column is use to display use table.matching column otherwise no need

implicit syntax
   select * from customer c,product p ;
explicit syntax
   select * from customer c cross join product p ;

dont use implicit and explicit when all combination required then use .
self joins
select e.employee_id e.first_name,m.first_name as manager  from employees e
 join employees m
 on e.reports_to=m.employee_id; 

multiple tables

select o.order_id,o.order_date,c.first_name,c.last_name,sc.name as 'status' from orders o join customer c on o.customer_id=c.customer_id join status s on o.status=s.order_status_id;


compound join

there is no unique values in column  soby using two column we can identify the data  use syntax

select * from order o join product p 
on o.order_id=p.order_id AND o.product_id=p.product_id;

implicit join syntax
select * from coustomer c, order o 
where c.coustomer_id=o.coustomer_id;

outer join

1.left
2.right
 select  o.customer_id ,first_name, order_status from orders o left join  customer c on c.customer_id=o.customer_id;
 select  o.customer_id ,first_name, order_status from orders o right join  customer c on c.customer_id=o.customer_id;

3.outer join multiple tables:

select o.order_id,o.order_date,
c.first_name as customer, sh.name as shipper,
os.name as status
from orders o
join customer c
on o.customer_id=c.customer_id
left join shippers sh
on o.shipper_id=sh.shipper_id 
join order_statuses os
on o.status=os.order_status_id;

4.self outer join
 select o.order_id,c.first_name from orders o join customers c ON o.customer_id=c.customer_id;

5.using - instant of ON on   we use USING  but column name of two name should be same

  select distinct c.customer_id,first_name,order_id, from 
customer c 
 left join orders o USING(customer_id) 

 IN compound join

select * from order o join product p 
USING(order_id,product_id);

6.NATURAL JOIN 
-IT PRODUCE un excepted results so dont use

7.cross joins


union

ex1
in same table-> column count should be equal in both query
select order_id,order_date, 'achived' as status from orders where order_date<'2023-01-01'union 
select  order_id,order_date, 'active' as status from orders where order_date>='2023-01-01'; 


insert hierarchy
insert into orders(customer_id,order_date,status)
values(1,'2023-02-03',1);
select last__insert_id();   
   -automatically last id will incremented and data added to column
ex 2:
insert into orders(customer_id,ord_date,status)values(1,'2023-01-02',1)
insert into order_items values
(last__insert_id(),1,1,3.2), 
(last__insert_id(),2,1,4.2);
both are same at coustomer table values




ex2 in diff table -> column count should be equal in both query
select first_name from customer union
select prod_name from product;

subquery:


create copy from one table to another table

method 1: create table order_archived as select * from orders;
--orders table is fully coped to order_archived.

1q.insert data from order table who are ordered in 2023 by using subquery
truncate above data to add insert it 
insert into  order_archived  select * from orders where order_date>'2023-01-01';

method 2: faster -directly give condition
create table customer_details as ( select * from customer where address='trichy');


update
ex1:
update orders set comment='gold' where customer_id in (select customer_id from customer where points>3000;



22. if (name ,count (emp_id)) from diff table then use join 


23.union . same no )of column required in both column and same data types req for column to merge
or our choising column should match 
-it remove all duplicate 
-without duplicate use -union all